# Como tiene que ser una estructura de un proyecto en c++. En Joplin tengo 
escrito mas especifico.
# Usar cmake.
# Por que no hice SDL2 standalone? Lo puedo y voy a hacer para mac y windows, 
pero para linux no se puede porque cada OS es diferente, por eso todos 
recomiendan que el usuario lo instale por su cuenta y con 
"find_package(SDL2 REQUIRED)" en Cmake, lo va a buscar en los paquetes 
instalados del OS(Linux).
https://www.reddit.com/r/gamedev/comments/b6d2pc/deployment_dependencies_on_c_when_shipping_a_game/

# Por que no hice OpenGL standalone? Porque viene en la mayoria de los OS y 
encima dependiendo de la grafica y OS que tiene el usuario, tiene que instalar 
determinado driver. Por lo cual no corre por mi cuenta que el usuario tenga 
OpenGL. Por eso lo buscamos en los paquetes del OS.

# No se usa multithread en ninguna 3d-graphics API. En ningun lado que se lo 
mire porque genera mas problemas. Ademas de que toda la paralelizacion ocurre 
en la GPU, entonces es al pedo. Otro dato es que all OpenGL calls require to 
be on the same thread.

# Diferencia entre speed y velocity:
La speed es un scalar, en cambio velocity es un vector direccional multiplicado por un scalar(el speed).
Velocidad = vec3(direccion) * speed / (magnitude of the direction vector);

# Cuando arrancamos un auto o aumentamos su velocidad, la aceleracion existe. 
Osea la aceleracion existe cuando hay un cambio en la velocidad.

(Def) Acceleration is the name we give to any process where the velocity changes.
Ya que velocidad es direction y speed, entonces la aceleracion ocurre cuando
cambiamos de direction o cuando cambiamos de speed.

(Def) Accelerations is the rate of change of the velocity.
a = (vf - vi) / (deltaT) -> vf: velocidad final, vi:., deltaT:.
